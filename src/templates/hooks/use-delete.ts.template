import { useMutation, useQueryClient } from "@tanstack/react-query";
import { InferRequestType, InferResponseType } from "hono";
import { client } from "@/lib/rpc";
import { {{CONSTANT_KEY}} } from "../constants";
import { toast } from 'sonner';
import { useTranslations } from "next-intl";
 

type ResponseType = InferResponseType<typeof client.api.{{RESOURCE_PLURAL}}[":id"]["$delete"], 200>;
type RequestType = InferRequestType<typeof client.api.{{RESOURCE_PLURAL}}[":id"]["$delete"]>;

export const UseDelete{{RESOURCE_SINGULAR}} = () => {
  const queryClient = useQueryClient();
  

  return useMutation<ResponseType, Error, RequestType>({
    mutationFn: async ({ param }) => {
      const response = await client.api.{{RESOURCE_PLURAL}}[":id"]["$delete"]({ param });
      
        const result = await response.json();
        if (!response.ok || result.error) {
            throw new Error(result.error || "Error deleting {{RESOURCE_SINGULAR}}");
        }
        return result;
    },
    onSuccess: () => {
      toast("Deleted successfully!");
      queryClient.invalidateQueries({ queryKey: [{{CONSTANT_KEY}}] });
    },
    onError: (error) => {
      toast.error(error.message || "Error deleting {{RESOURCE_SINGULAR}}");
    },
  });
};