import { useMutation, useQueryClient } from "@tanstack/react-query";
import { InferRequestType, InferResponseType } from "hono";
import { client } from "@/lib/rpc";
import { {{CONSTANT_KEY}} } from "../constants";
import { toast } from 'sonner';
import { useTranslations } from "next-intl";
 

type ResponseType = InferResponseType<typeof client.api.{{RESOURCE_PLURAL}}["$post"], 200>;
type RequestType = InferRequestType<typeof client.api.{{RESOURCE_PLURAL}}["$post"]>;

const useCreate{{RESOURCE_SINGULAR}} = () => {
  const queryClient = useQueryClient();
  const t = useTranslations("Common");

  return useMutation<ResponseType, Error, RequestType>({
    mutationFn: async ({ json }) => {
      const response = await client.api.{{RESOURCE_PLURAL}}["$post"]({ json });
     
        const result = await response.json();
        if (!response.ok || result.error) {
       
            throw new Error(result.error || t("error.generic"));
        }
        return result;
    },
    onSuccess: () => {
      toast(t("created"));
      queryClient.invalidateQueries({ queryKey: [{{CONSTANT_KEY}}] });
    },
    onError: (error) => {
      toast.error(error.message ||  t("error.generic"));
    },
  });
};

export default useCreate{{RESOURCE_SINGULAR}};