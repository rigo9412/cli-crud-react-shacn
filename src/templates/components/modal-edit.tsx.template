"use client";
import { Suspense } from "react";
import { DialogForm } from "@/components/dialog-form";
import { KEY_FORM_{{modelNameUpperCase}}_UPDATE } from "../constants";
import useModal from "@/hooks/use-modal";
import { Form{{modelName}} } from "./form";
import { {{modelName}} } from "../types";
import { UseEdit{{modelName}} } from "../api/use-edit-{{modelNameKebabCase}}";
import { UseGet{{modelName}} } from "../api/use-get-{{modelNameKebabCase}}-by-id";
import { Badge } from "@/components/ui/badge";
import { useTranslations } from 'next-intl';

export const ModalContent = ({hasPermission} : {hasPermission: boolean}) => {
  const { id, close } = useModal({ key: KEY_FORM_{{modelNameUpperCase}}_UPDATE });
  const { data: {{modelNameCamelCase}}, isLoading } = UseGet{{modelName}}({ id });
  const { mutate, isPending: isLoadingUpdate } = UseEdit{{modelName}}();
  const t = useTranslations('{{modelNamePlural}}');
  const common = useTranslations('Common');

  if (id === null) {
    return <></>;
  }

  const onSubmit = async ({{modelNameCamelCase}}: {{modelName}}) => {
    mutate(
      { param: { id: id }, json: {{modelNameCamelCase}} },
      {
        onSuccess: () => {
          close();
        },
      }
    );
  };

  return (
    <DialogForm
      title={t('edit')}
      badges={
        <Badge 
          variant="secondary"
          data-testid="{{modelNameKebabCase}}-id-badge"
        >
          {id}
        </Badge>
      }
      open={id != null}
      onOpenChange={close}
      size="lg"
      data-testid="modal-edit-{{modelNameKebabCase}}"
    >
      {isLoading && (
        <div data-testid="loading-{{modelNameKebabCase}}-data">
          {common('loading')}
        </div>
      )}
      {!hasPermission && (
        <div data-testid="no-permission-edit">
          {t('noPermissionEdit')}
        </div>
      )}

      {!isLoading && hasPermission && (
        <Form{{modelName}}
          submit={onSubmit}
          isLoading={isLoadingUpdate}
          onClose={close}
          init{{modelName}}={ {{#if fieldMappings}}{{fieldMappings}}{{else}}{
            {{#each fields}}
            {{name}}: {{modelNameCamelCase}}?.{{name}}{{#if optional}} ?? ""{{/if}},
            {{/each}}
          }{{/if}} }
        />
      )}
    </DialogForm>
  );
};

export const ModalEdit{{modelName}} = ({hasPermission} : {hasPermission: boolean}) => {
  const common = useTranslations('Common');
  return (
    <Suspense 
      fallback={
        <div data-testid="loading-edit-{{modelNameKebabCase}}">
          {common('loading')}
        </div>
      }
    >
      <ModalContent  hasPermission={hasPermission} />
    </Suspense>
  );
};